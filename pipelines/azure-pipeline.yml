trigger:
  branches:
    include:
      - main
      - develop

variables:
  vmImageName: 'ubuntu-latest'
  nodeVersion: '18.x'
  buildConfiguration: 'production'
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  artifactName: 'kinodevUI'

stages:
- stage: Build
  displayName: 'Build stage'
  jobs:
  - job: BuildJob
    displayName: 'Build Vite React App'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: NodeTool@0
      displayName: 'Use Node.js $(nodeVersion)'
      inputs:
        versionSpec: $(nodeVersion)

    - script: |
        npm ci
      workingDirectory: $(workingDirectory)
      displayName: 'Install dependencies'
      
    - script: |
        npm run build
      workingDirectory: $(workingDirectory)
      displayName: 'Build application'
      env:
        VITE_AUTH_BASE_URL: $(VITE_AUTH_BASE_URL)
        VITE_API_GATEWAY_BASE_URL: $(VITE_API_GATEWAY_BASE_URL)
        VITE_MAIN_PORTAL_URL: $(VITE_MAIN_PORTAL_URL)
        VITE_ADMIN_PORTAL_URL: $(VITE_ADMIN_PORTAL_URL)
        VITE_PUBLIC_IMAGES_HOST: $(VITE_PUBLIC_IMAGES_HOST)
        VITE_PUBLIC_IMAGES_STORE_ACCOUNT: $(VITE_PUBLIC_IMAGES_STORE_ACCOUNT)    # Run environment injection script (platform-agnostic)
    - task: PowerShell@2
      displayName: 'Set up runtime environment variables'
      inputs:
        filePath: '$(workingDirectory)/pipelines/inject-env.ps1'
        workingDirectory: $(workingDirectory)
      env:
        VITE_AUTH_BASE_URL: $(VITE_AUTH_BASE_URL)
        VITE_API_GATEWAY_BASE_URL: $(VITE_API_GATEWAY_BASE_URL)
        VITE_MAIN_PORTAL_URL: $(VITE_MAIN_PORTAL_URL)
        VITE_ADMIN_PORTAL_URL: $(VITE_ADMIN_PORTAL_URL)
        VITE_PUBLIC_IMAGES_HOST: $(VITE_PUBLIC_IMAGES_HOST)
        VITE_PUBLIC_IMAGES_STORE_ACCOUNT: $(VITE_PUBLIC_IMAGES_STORE_ACCOUNT)
        
    # Copy web.config for Azure App Service
    - task: CopyFiles@2
      displayName: 'Copy web.config'
      inputs:
        sourceFolder: '$(workingDirectory)/pipelines'
        contents: 'web.config'
        targetFolder: '$(workingDirectory)/dist'

    # Publish the build artifacts
    - task: PublishPipelineArtifact@1
      displayName: 'Publish artifact'
      inputs:
        targetPath: '$(workingDirectory)/dist'
        artifactName: $(artifactName)

- stage: Deploy
  displayName: 'Deploy to Azure Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployJob
    displayName: 'Deploy to Azure'
    environment: 'Production'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: $(artifactName)
              downloadPath: '$(Pipeline.Workspace)/app'
            displayName: 'Download build artifacts'

          - task: AzureWebApp@1
            displayName: 'Deploy to Azure Web App'
            inputs:
              azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
              appName: '$(AZURE_WEBAPP_NAME)'
              package: '$(Pipeline.Workspace)/app'
              deploymentMethod: 'auto'
