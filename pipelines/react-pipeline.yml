trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  # Update these variables with your Azure Web App information
  webAppName: '$(AZURE_WEBAPP_NAME)'
  azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
  
stages:
  - stage: Build_and_Test
    displayName: 'Build and Test React App'
    jobs:
      - job: Build_Test_Job
        displayName: 'Build and Test'
        steps:
        - checkout: self
          clean: true

        - task: NodeTool@0
          inputs:
            versionSpec: '18.x'
          displayName: 'Install Node.js'

        - task: Cache@2
          inputs:
            key: 'npm | "$(Agent.OS)" | package-lock.json'
            path: 'node_modules'
            cacheHitVar: 'CACHE_RESTORED'
          displayName: 'Cache node_modules'

        - task: Npm@1
          inputs:
            command: 'ci'
          displayName: 'Install dependencies'
          condition: ne(variables.CACHE_RESTORED, 'true')

        - task: Npm@1
          inputs:
            command: 'custom'
            customCommand: 'run test'
          displayName: 'Run tests'

        - script: |
            echo "Copying production Vite config..."
            if [ -f "$(System.DefaultWorkingDirectory)/vite.config.prod.ts" ]; then
              cp $(System.DefaultWorkingDirectory)/vite.config.prod.ts $(System.DefaultWorkingDirectory)/vite.config.ts
              echo "Production config copied successfully"
            else
              echo "Production config file not found, using default"
            fi
          displayName: 'Set production Vite config'

        - task: Npm@1
          inputs:
            command: 'custom'
            customCommand: 'run build'
          displayName: 'Build application'

        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: 'coverage/junit.xml'
          displayName: 'Publish test results'
          condition: succeededOrFailed()
        
        # Enhanced build verification
        - script: |
            echo "=== Build Output Verification ==="
            echo "Contents of dist directory:"
            ls -la $(System.DefaultWorkingDirectory)/dist || echo "dist directory not found!"
            echo ""
            echo "Checking for index.html:"
            if [ -f "$(System.DefaultWorkingDirectory)/dist/index.html" ]; then
              echo "✓ index.html found"
              echo "File size: $(stat -c%s $(System.DefaultWorkingDirectory)/dist/index.html) bytes"
              echo "First few lines of index.html:"
              head -10 $(System.DefaultWorkingDirectory)/dist/index.html
            else
              echo "✗ index.html NOT found!"
              echo "Available files in dist:"
              find $(System.DefaultWorkingDirectory)/dist -type f -name "*.html" 2>/dev/null || echo "No HTML files found"
            fi
            echo ""
            echo "Checking for assets:"
            find $(System.DefaultWorkingDirectory)/dist -type f \( -name "*.js" -o -name "*.css" \) | head -10
          displayName: 'Enhanced build verification'

        - script: |
            echo "Creating web.config for Azure Web App..."
            cat > $(System.DefaultWorkingDirectory)/dist/web.config << 'EOF'
            <?xml version="1.0" encoding="utf-8"?>
            <configuration>
              <system.webServer>
                <rewrite>
                  <rules>
                    <rule name="React Routes" stopProcessing="true">
                      <match url=".*" />
                      <conditions logicalGrouping="MatchAll">
                        <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
                        <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
                      </conditions>
                      <action type="Rewrite" url="/" />
                    </rule>
                  </rules>
                </rewrite>
                <staticContent>
                  <mimeMap fileExtension=".json" mimeType="application/json" />
                  <mimeMap fileExtension=".woff" mimeType="application/font-woff" />
                  <mimeMap fileExtension=".woff2" mimeType="application/font-woff2" />
                </staticContent>
                <httpErrors existingResponse="PassThrough" />
              </system.webServer>
            </configuration>
            EOF
            echo "web.config created successfully"
            cat $(System.DefaultWorkingDirectory)/dist/web.config
          displayName: 'Create web.config for SPA routing'

        - task: ArchiveFiles@2
          displayName: 'Archive build files'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/dist'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(webAppName).zip'
            replaceExistingArchive: true

        # Verify archive contents
        - script: |
            echo "=== Archive Verification ==="
            echo "Archive file: $(Build.ArtifactStagingDirectory)/$(webAppName).zip"
            echo "Archive size: $(stat -c%s $(Build.ArtifactStagingDirectory)/$(webAppName).zip) bytes"
            echo "Archive contents:"
            unzip -l $(Build.ArtifactStagingDirectory)/$(webAppName).zip | head -20
          displayName: 'Verify archive contents'

        - task: PublishBuildArtifacts@1
          inputs:
            pathToPublish: '$(Build.ArtifactStagingDirectory)'
            artifactName: 'drop'
            publishLocation: 'Container'
          displayName: 'Publish artifacts'

  - stage: Deploy
    displayName: 'Deploy to Azure Web App'
    dependsOn: Build_and_Test
    condition: succeeded()
    jobs:
      - job: Deploy
        displayName: 'Deploy Web App'
        steps:
        - task: DownloadBuildArtifacts@1
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'drop'
            downloadPath: '$(System.ArtifactsDirectory)'
          displayName: 'Download build artifacts'

        # Verify downloaded artifacts
        - script: |
            echo "=== Downloaded Artifacts Verification ==="
            echo "Contents of artifacts directory:"
            ls -la $(System.ArtifactsDirectory)/drop/
            echo "Archive to deploy: $(System.ArtifactsDirectory)/drop/$(webAppName).zip"
            if [ -f "$(System.ArtifactsDirectory)/drop/$(webAppName).zip" ]; then
              echo "✓ Archive found for deployment"
              echo "Archive size: $(stat -c%s $(System.ArtifactsDirectory)/drop/$(webAppName).zip) bytes"
            else
              echo "✗ Archive NOT found!"
              echo "Available files:"
              find $(System.ArtifactsDirectory)/drop/ -type f
            fi
          displayName: 'Verify downloaded artifacts'

        - task: AzureRmWebAppDeployment@4
          inputs:
            ConnectionType: 'AzureRM'
            azureSubscription: '$(azureSubscription)'
            appType: 'webApp'
            WebAppName: '$(webAppName)'
            packageForLinux: '$(System.ArtifactsDirectory)/drop/$(webAppName).zip'
            enableCustomDeployment: true
            DeploymentType: 'zipDeploy'
            # Remove or comment out StartupCommand for static content
            # StartupCommand: ''
          displayName: 'Deploy to Azure Web App'